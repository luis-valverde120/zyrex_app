datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}


model User {
  id        String   @id @default(cuid())
  email     String   @unique
  nombre    String
  password  String
  direccion String?
  telefono  String?
  rol       Role     @default(CLIENTE)
  pedidos   Pedido[]
  carrito   Carrito?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // üëá A√±ade esta relaci√≥n si no la tienes:
  // Un usuario (si es artesano) puede tener muchos productos
  productosDeArtesano Producto[] @relation("ArtesanoProductos")
}

enum Role {
  CLIENTE
  ARTESANO // Asumimos que los artesanos tambi√©n son usuarios
  ADMIN
}


model Producto {
  id            String    @id @default(cuid())
  nombre        String
  descripcion   String?
  precio        Float
  stock         Int       @default(0)
  imagenes      String[]
  categoriaId   String?
  categoria     Categoria? @relation(fields: [categoriaId], references: [id])
  itemsPedido   ItemPedido[]
  itemsCarrito  ItemCarrito[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // üëá A√±ade estos campos si no los tienes:
  // ID del usuario artesano que cre√≥/posee el producto
  artesanoId    String // Puede ser opcional si no todos los productos son de artesanos espec√≠ficos,
                       // o String si es mandatorio. Para inventario de artesano, deber√≠a ser String y no opcional.
                       // Ajusta seg√∫n tu l√≥gica. Si es String, elimina el '?'
  artesano      User?    @relation("ArtesanoProductos", fields: [artesanoId], references: [id])
}

// üè∑Ô∏è Categor√≠as de Productos
model Categoria {
  id        String     @id @default(cuid())
  nombre    String     @unique
  productos Producto[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

// üõí Carrito de Compra
model Carrito {
  id        String        @id @default(cuid())
  usuarioId String        @unique // Clave for√°nea y √∫nica para asegurar un carrito por usuario
  usuario   User          @relation(fields: [usuarioId], references: [id])
  items     ItemCarrito[] // Items que componen el carrito
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt // Para saber cu√°ndo fue la √∫ltima vez que se modific√≥
}

// üìÑ Items del Carrito (Tabla intermedia para la relaci√≥n muchos-a-muchos entre Carrito y Producto)
model ItemCarrito {
  id          String   @id @default(cuid())
  carritoId   String
  carrito     Carrito  @relation(fields: [carritoId], references: [id], onDelete: Cascade) // Si se borra el carrito, se borran sus items
  productoId  String
  producto    Producto @relation(fields: [productoId], references: [id])
  cantidad    Int
  addedAt     DateTime @default(now()) // Cu√°ndo se a√±adi√≥ el item al carrito

  @@unique([carritoId, productoId]) // Un producto solo puede estar una vez en el carrito (se actualiza cantidad)
}


// üìù Pedidos
model Pedido {
  id            String       @id @default(cuid())
  usuarioId     String
  usuario       User         @relation(fields: [usuarioId], references: [id])
  items         ItemPedido[]
  total         Float        // O Decimal
  estado        EstadoPedido @default(PENDIENTE)
  direccionEnvio String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

enum EstadoPedido {
  PENDIENTE
  PAGADO
  ENVIADO
  ENTREGADO
  CANCELADO
}

// üìÑ Items del Pedido
model ItemPedido {
  id          String   @id @default(cuid())
  pedidoId    String
  pedido      Pedido   @relation(fields: [pedidoId], references: [id], onDelete: Cascade)
  productoId  String
  producto    Producto @relation(fields: [productoId], references: [id])
  cantidad    Int
  precioUnidad Float   // O Decimal
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([pedidoId, productoId])
}

